# OpenAPI Specification
# This file defines the API contract for the application using the OpenAPI 3.0 standard.
# It describes the available endpoints, request/response formats, and other API details.
#
# Key sections to include:
# - `info`: Metadata about the API (e.g., title, version, description).
# - `servers`: The base URLs for the API.
# - `paths`: Definitions of the API endpoints and their operations.
# - `components`: Reusable schemas, parameters, and responses.
#
# Add your API specification below:

openapi: 3.1.0
info:
  title: Auth API
  version: 1.0.0
  description: API for user authentication and authorization.

servers:
  - url: http://localhost:8024
    description: Local server

tags:
  - name: Auth
    description: Authentication operations

paths:
  /register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  username:
                    type: string
        "400":
          description: Invalid input or user already exists
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"

  /login:
    post:
      summary: Log in user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login info (use OAuth2 endpoint)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  authorization_endpoint:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"

  /user-info:
    get:
      summary: Get current user info
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoDto"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"

  /users/role/{role}:
    get:
      summary: Get user IDs by role
      tags: [Auth]
      parameters:
        - name: role
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Role"
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: List of user IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        "400":
          description: Invalid role or bad request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"

  /users/{userId}/roles:
    get:
      summary: Get roles for a user
      tags: [Auth]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Set of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "404":
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required: [username, email, password]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
        email:
          type: string
          format: email
          pattern: '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
        password:
          type: string
          minLength: 6
        role:
          type: string
          enum: [MEMBER, COACH]
          default: MEMBER
          description: "User role. Allowed values: MEMBER or COACH."
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
    UserInfoDto:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        authorities:
          type: array
          items:
            type: string
    Role:
      type: string
      enum: [MEMBER, COACH]
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
